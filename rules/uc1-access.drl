package edu.kit.scc.webreg.dools.unicluster

import edu.kit.scc.webreg.entity.UserEntity;
import edu.kit.scc.webreg.entity.SamlIdpMetadataEntity;
import edu.kit.scc.webreg.drools.UnauthorizedUser;
import edu.kit.scc.webreg.entity.RegistryEntity;
import edu.kit.scc.webreg.entity.as.ASUserAttrEntity;
import edu.kit.scc.webreg.entity.as.ASUserAttrValueStringEntity;
import java.util.Date;

global org.slf4j.Logger logger;

rule "AA Attribute test"

    when
         $user : UserEntity( $userAttrs : userAttrs )
         $userAttr : ASUserAttrEntity( attributeSource.name == "UC1-StatsAccess", $values : values ) from $userAttrs
         ASUserAttrValueStringEntity( key == "result" && valueString == "1" ) from $values
    then
    	logger.info( "Insert positive result String for user {}", $user.getEppn() );
    	insert( new String ("umfrage-is-set") );

end

rule "AA String test"

    when
        not ( String( this == "umfrage-is-set" ) )
		$date : Date()
		$registry : RegistryEntity( ($date.getTime() - agreedTime.getTime()) > 14*24*60*60*1000 )
    then
    	logger.info( "Umfrage is not set or too old" );
    	insert( new UnauthorizedUser(null, "no-umfrage") );

end

rule "is bwIdm Member"

    when
        $user : UserEntity( idp.getEntityCategoryList() not contains "http://aai.dfn.de/category/bwidm-member" )
    then
    	logger.info( "User {} is not bwIdm Member", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "not-bwidm-member") );

end

rule "Email is set"

    when
        $user : UserEntity( email == null )
    then
    	logger.info( "E-Mail for user {} is not set", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "e-mail-missing") );

end

rule "Entitlement is set"

    when
        $user : UserEntity( 
        	attributeStore["urn:oid:1.3.6.1.4.1.5923.1.1.1.7"] 
        		not matches ".*(^|;)http://bwidm.de/entitlement/bwUniCluster(;|$).*" )
    then
    	logger.info( "Entitlement for user {} is missing", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "bwunicluster-entitlement-missing") );

end

rule "uidNumber above 1000"

    when
        $user : UserEntity( (uidNumber == null) || (uidNumber < 1000) )
    then
    	logger.info( "User {} has uidNumber null or lesser thean 1000", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "uid-number-wrong") );

end

rule "primary group is set"

    when
        $user : UserEntity( (primaryGroup == null) || (primaryGroup.getName() == "invalid") )
    then
    	logger.info( "User {} has no or invalid primary group", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "primary-gid-wrong") );

end

rule "Home ID is set"

    when
        $user : UserEntity( 
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "kn" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "ka" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "hd" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "tu" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "fr" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "st" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "ul" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "ma" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "es" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "hs" &&
        	attributeStore["http://bwidm.de/bwidmOrgId"] != "ho"
)
    then
    	logger.info( "Home ID for user {} is missing", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "home-id-missing") );

end

rule "Home UID is set"

    when
        $user : UserEntity( 
        	attributeStore["urn:oid:0.9.2342.19200300.100.1.1"] == null )
    then
    	logger.info( "Home UID for user {} is missing", $user.getEppn() );
    	insert( new UnauthorizedUser($user, "home-uid-missing") );

end